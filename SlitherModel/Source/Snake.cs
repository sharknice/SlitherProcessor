// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SlitherModel;
//
//    var snake = Snake.FromJson(jsonString);

namespace SlitherModel.Source
{
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Snake
    {
        [JsonProperty("id")]
        public double Id { get; set; }

        [JsonProperty("xx")]
        public double Xx { get; set; }

        [JsonProperty("yy")]
        public double Yy { get; set; }

        [JsonProperty("rcv")]
        public double Rcv { get; set; }

        [JsonProperty("er")]
        public double Er { get; set; }

        [JsonProperty("pr")]
        public double Pr { get; set; }

        [JsonProperty("pma")]
        public double Pma { get; set; }

        [JsonProperty("ec")]
        public string Ec { get; set; }

        [JsonProperty("eca")]
        public double Eca { get; set; }

        [JsonProperty("ppa")]
        public double Ppa { get; set; }

        [JsonProperty("ppc")]
        public string Ppc { get; set; }

        [JsonProperty("antenna")]
        public bool Antenna { get; set; }

        [JsonProperty("one_eye")]
        public bool OneEye { get; set; }

        [JsonProperty("drez")]
        public bool Drez { get; set; }

        [JsonProperty("ed")]
        public double Ed { get; set; }

        [JsonProperty("esp")]
        public double Esp { get; set; }

        [JsonProperty("easp")]
        public double Easp { get; set; }

        [JsonProperty("eac")]
        public bool Eac { get; set; }

        [JsonProperty("jyt")]
        public bool Jyt { get; set; }

        [JsonProperty("slg")]
        public bool Slg { get; set; }

        [JsonProperty("eo")]
        public double Eo { get; set; }

        [JsonProperty("swell")]
        public double Swell { get; set; }

        [JsonProperty("cusk")]
        public bool Cusk { get; set; }

        [JsonProperty("rbcs")]
        public List<double> Rbcs { get; set; }

        [JsonProperty("cv")]
        public double Cv { get; set; }

        [JsonProperty("fdhc")]
        public double Fdhc { get; set; }

        [JsonProperty("fdtc")]
        public double Fdtc { get; set; }

        [JsonProperty("fdl")]
        public double Fdl { get; set; }

        [JsonProperty("fnfr")]
        public double Fnfr { get; set; }

        [JsonProperty("na")]
        public double Na { get; set; }

        [JsonProperty("chl")]
        public double Chl { get; set; }

        [JsonProperty("tsp")]
        public double Tsp { get; set; }

        [JsonProperty("sfr")]
        public double Sfr { get; set; }

        [JsonProperty("accessory")]
        public double Accessory { get; set; }

        [JsonProperty("rr")]
        public double Rr { get; set; }

        [JsonProperty("gg")]
        public double Gg { get; set; }

        [JsonProperty("bb")]
        public double Bb { get; set; }

        [JsonProperty("cs")]
        public string Cs { get; set; }

        [JsonProperty("cs04")]
        public string Cs04 { get; set; }

        [JsonProperty("csw")]
        public string Csw { get; set; }

        [JsonProperty("sc")]
        public double Sc { get; set; }

        [JsonProperty("ssp")]
        public double Ssp { get; set; }

        [JsonProperty("fsp")]
        public double Fsp { get; set; }

        [JsonProperty("msp")]
        public double Msp { get; set; }

        [JsonProperty("fxs")]
        public Dictionary<string, double> Fxs { get; set; }

        [JsonProperty("fys")]
        public Dictionary<string, double> Fys { get; set; }

        [JsonProperty("fchls")]
        public Dictionary<string, double> Fchls { get; set; }

        [JsonProperty("fpos")]
        public double Fpos { get; set; }

        [JsonProperty("ftg")]
        public double Ftg { get; set; }

        [JsonProperty("fx")]
        public double Fx { get; set; }

        [JsonProperty("fy")]
        public double Fy { get; set; }

        [JsonProperty("fchl")]
        public double Fchl { get; set; }

        [JsonProperty("fas")]
        public Dictionary<string, double> Fas { get; set; }

        [JsonProperty("fapos")]
        public double Fapos { get; set; }

        [JsonProperty("fatg")]
        public double Fatg { get; set; }

        [JsonProperty("fa")]
        public double Fa { get; set; }

        [JsonProperty("ehang")]
        public double Ehang { get; set; }

        [JsonProperty("wehang")]
        public double Wehang { get; set; }

        [JsonProperty("ehl")]
        public double Ehl { get; set; }

        [JsonProperty("msl")]
        public double Msl { get; set; }

        [JsonProperty("fam")]
        public double Fam { get; set; }

        [JsonProperty("ang")]
        public double Ang { get; set; }

        [JsonProperty("eang")]
        public double Eang { get; set; }

        [JsonProperty("wang")]
        public double Wang { get; set; }

        [JsonProperty("rex")]
        public double Rex { get; set; }

        [JsonProperty("rey")]
        public double Rey { get; set; }

        [JsonProperty("sp")]
        public double Sp { get; set; }

        [JsonProperty("lnp")]
        public Lnp Lnp { get; set; }

        [JsonProperty("pts")]
        public List<Lnp> Pts { get; set; }

        [JsonProperty("sct")]
        public double Sct { get; set; }

        [JsonProperty("flpos")]
        public double Flpos { get; set; }

        [JsonProperty("fls")]
        public Dictionary<string, double> Fls { get; set; }

        [JsonProperty("fl")]
        public double Fl { get; set; }

        [JsonProperty("fltg")]
        public double Fltg { get; set; }

        [JsonProperty("tl")]
        public double Tl { get; set; }

        [JsonProperty("cfl")]
        public double Cfl { get; set; }

        [JsonProperty("scang")]
        public double Scang { get; set; }

        [JsonProperty("dead_amt")]
        public double DeadAmt { get; set; }

        [JsonProperty("alive_amt")]
        public double AliveAmt { get; set; }

        [JsonProperty("nk")]
        public string Nk { get; set; }

        [JsonProperty("spang")]
        public double Spang { get; set; }

        [JsonProperty("wsep")]
        public double Wsep { get; set; }

        [JsonProperty("sep")]
        public double Sep { get; set; }

        [JsonProperty("edir")]
        public double Edir { get; set; }

        [JsonProperty("iiv")]
        public bool Iiv { get; set; }

        [JsonProperty("dir")]
        public double Dir { get; set; }
    }

    public partial class Lnp
    {
        [JsonProperty("exs")]
        public List<double> Exs { get; set; }

        [JsonProperty("eys")]
        public List<double> Eys { get; set; }

        [JsonProperty("efs")]
        public List<double> Efs { get; set; }

        [JsonProperty("ems")]
        public List<double> Ems { get; set; }

        [JsonProperty("eiu")]
        public double Eiu { get; set; }

        [JsonProperty("xx")]
        public double Xx { get; set; }

        [JsonProperty("yy")]
        public double Yy { get; set; }

        [JsonProperty("fx")]
        public double Fx { get; set; }

        [JsonProperty("fy")]
        public double Fy { get; set; }

        [JsonProperty("da")]
        public double Da { get; set; }

        [JsonProperty("ebx")]
        public double Ebx { get; set; }

        [JsonProperty("eby")]
        public double Eby { get; set; }

        [JsonProperty("dying", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Dying { get; set; }
    }

    public partial class Snake
    {
        public static Snake FromJson(string json) => JsonConvert.DeserializeObject<Snake>(json, SlitherModel.Source.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Snake self) => JsonConvert.SerializeObject(self, SlitherModel.Source.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
